security:
  role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

  password_hashers:
    App\Entity\User: auto

  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        username_path: username

    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~

    main:
      pattern: ^/
      stateless: true
      provider: app_user_provider
      jwt: ~

  access_control:
    - { path: ^/$, roles: PUBLIC_ACCESS }
    - { path: ^/api$, roles: PUBLIC_ACCESS }
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/.+, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/users/.+, roles: IS_AUTHENTICATED_FULLY }
    #- { path: ^/api/, roles: IS_AUTHENTICATED }
    #- { path: ^/api, roles: PUBLIC_ACCESS }
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      App\Entity\User:
        algorithm: md5
        encode_as_base64: false
        iterations: 0
#      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#        algorithm: auto
#        cost: 4 # Lowest possible value for bcrypt
#        time_cost: 3 # Lowest possible value for argon
#        memory_cost: 10 # Lowest possible value for argon
